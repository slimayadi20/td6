# Builder stage
FROM golang:alpine AS builder

WORKDIR /app

# Copying go.mod and go.sum separately to leverage caching
COPY go.mod .
COPY go.sum .

# Set the GOPROXY to fetch modules
ENV GOPROXY=https://proxy.golang.org,direct

# Tidy and download dependencies
RUN go mod tidy
RUN go mod download

# Copy the rest of the application
COPY . .

# Explicitly download the missing module
RUN go mod download golang.org/x/sys

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

# Final stage
FROM scratch

# Copy the compiled binary from the builder stage
COPY --from=builder /app/app .

# Expose the port the service runs on
EXPOSE 8080

# Command to run the executable
CMD ["./app"]
